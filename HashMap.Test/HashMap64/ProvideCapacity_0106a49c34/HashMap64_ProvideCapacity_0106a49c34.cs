// Test regenerated by RoostGPT for test se-code using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;

namespace HashMapNamespace.Test
{
    public class HashMap64
    {
        public virtual void ProvideCapacity(int capacity) { }
        public virtual void Resize(int newSize) { }
    }

    [TestFixture]
    public class HashMap64_ProvideCapacity_0106a49c34
    {
        private Mock<HashMap64> _mockHashMap;

        [SetUp]
        public void Setup()
        {
            _mockHashMap = new Mock<HashMap64>();
        }

        [Test]
        public void ProvideCapacity_LessThanLimitCapacity_NoResize()
        {
            // Arrange
            int tempIdCount = 5;

            // Act
            _mockHashMap.Object.ProvideCapacity(tempIdCount);

            // Assert
            _mockHashMap.Verify(m => m.Resize(It.IsAny<int>()), Times.Never);
        }

        [Test]
        public void ProvideCapacity_GreaterThanLimitCapacity_ResizeCalledOnce()
        {
            // Arrange
            int tempIdCount = 10;

            // Act
            _mockHashMap.Object.ProvideCapacity(tempIdCount);

            // Assert
            _mockHashMap.Verify(m => m.Resize(It.IsAny<int>()), Times.Once);
        }

        [Test]
        public void ProvideCapacity_EqualToLimitCapacity_NoResize()
        {
            // Arrange
            int tempIdCount = 5;

            // Act
            _mockHashMap.Object.ProvideCapacity(tempIdCount);

            // Assert
            _mockHashMap.Verify(m => m.Resize(It.IsAny<int>()), Times.Never);
        }

        [TearDown]
        public void Teardown()
        {
            _mockHashMap = null;
        }
    }
}
